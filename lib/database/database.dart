// lib/database/database.dart

import 'dart:io';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

// This import is generated by the build_runner. It will show an error at first.
part 'database.g.dart';

// --- TABLE DEFINITIONS ---

// This table will store the main information about each flight.
@DataClassName('Flight')
class Flights extends Table {
  // Primary key, automatically increments.
  IntColumn get id => integer().autoIncrement()();

  // Flight details.
  TextColumn get departure => text()();

  TextColumn get destination => text()();

  DateTimeColumn get flightDate => dateTime()();

  IntColumn get distance => integer()();
}

// This table will store the individual points for each flight's route.
// It has a many-to-one relationship with the Flights table.
@DataClassName('RoutePoint')
class RoutePoints extends Table {
  // Primary key for the point itself.
  IntColumn get id => integer().autoIncrement()();

  // Foreign key to link this point to a specific flight.
  // The `references` call creates the relationship.
  IntColumn get flightId => integer().references(Flights, #id)();

  // Geographic coordinates for the point. `real()` is used for doubles.
  RealColumn get latitude => real()();

  RealColumn get longitude => real()();
}

// --- DATABASE CLASS ---

// The `@DriftDatabase` annotation tells drift which tables to include.
@DriftDatabase(tables: [Flights, RoutePoints])
class AppDatabase extends _$AppDatabase {
  // The constructor. The `super` call connects to the database.
  AppDatabase() : super(_openConnection());

  // This is required by drift. It should be incremented whenever you change
  // the table structure (e.g., add a column).
  @override
  int get schemaVersion => 1;
}

// This private function sets up the database connection.
LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    return NativeDatabase(file);
  });
}
